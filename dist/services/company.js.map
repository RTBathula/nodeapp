{"version":3,"sources":["../../app/services/company.js"],"names":["companyService","createNew","newCompanyObj","deferred","defer","response","collection","global","mongoCon","name","trim","find","limit","next","err","respDoc","status","message","reject","_id","ObjectId","createdAt","Date","getTime","updatedAt","insertOne","doc","data","resolve","promise","getDetails","companyId","getList","skip","toArray","docs","updateCompany","updateCompanyObj","updateObj","country","address","city","email","phone","findOneAndUpdate","$set","returnOriginal","resp","value","addBeneficial","addBeneficialObj","checkBenficialExistQuery","beneficials","pushObj","$push"],"mappings":"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","file":"company.js","sourcesContent":["'use strict';\r\n\r\nimport q from 'q'\r\nimport mongodb from 'mongodb'\r\n\r\nconst companyService = {\r\n  \r\n    /*Desc   : Create new company\r\n      Params : {name,address,city,country,email,phone,directors[],beneficials[]}\r\n      Returns: Promise\r\n               Resolve->saved success message\r\n               Reject->Error on find() or company name already exist or save()\r\n    */\r\n    createNew: (newCompanyObj) => {      \r\n       \r\n        let deferred = q.defer()\r\n        let response = {}\r\n\r\n        try{         \r\n          var collection=global.mongoCon.collection(\"company\")\r\n\r\n          newCompanyObj.name = newCompanyObj.name.trim()        \r\n\r\n          collection.find({name: newCompanyObj.name}).limit(1).next(function(err, respDoc) {\r\n            if(err) { \r\n              response.status  = \"error\"\r\n              response.message = \"Something went wrong. Please try after sometime\"               \r\n              deferred.reject(response)\r\n            }\r\n            if(respDoc){ \r\n              response.status  = \"error\"\r\n              response.message = \"Company with given name is already exist.\"               \r\n              deferred.reject(response)              \r\n            }\r\n            if(!respDoc){     \r\n              newCompanyObj._id       = new mongodb.ObjectId()     \r\n              newCompanyObj.createdAt = new Date().getTime()  \r\n              newCompanyObj.updatedAt = new Date().getTime()    \r\n\r\n              collection.insertOne(newCompanyObj, function(err, doc) {\r\n                if (err) {                \r\n                  response.status  = \"error\"\r\n                  response.message = \"Unable to create new company. Please try after sometime\"               \r\n                  deferred.reject(response)\r\n                } else { \r\n                  response.status  = \"success\"\r\n                  response.message = \"Successfully created a company\" \r\n                  response.data    = newCompanyObj\r\n                  deferred.resolve(response);\r\n                }\r\n              })\r\n            }\r\n          })                           \r\n\r\n        }catch(err){ \r\n          response.status  = \"error\"\r\n          response.message = err               \r\n          deferred.reject(response)            \r\n        }\r\n\r\n        return deferred.promise\r\n    },\r\n\r\n    /*Desc   : Get company details\r\n      Params : company id\r\n      Returns: Promise\r\n               Resolve->company details\r\n               Reject->Error on find() or document not found\r\n    */\r\n    getDetails: (companyId) => {      \r\n       \r\n        let deferred = q.defer()\r\n        let response = {}\r\n\r\n        try{  \r\n\r\n          var collection=global.mongoCon.collection(\"company\")       \r\n\r\n          collection.find({_id: new mongodb.ObjectId(companyId)}).limit(1).next(function(err, respDoc) {\r\n            if(err || !respDoc) { \r\n              response.status  = \"error\"\r\n              response.message = \"Unable to find company with given company id. Please check company id!\"               \r\n              deferred.reject(response)\r\n            }\r\n            \r\n            response.status  = \"success\"\r\n            response.message = \"Successfully fetched the company details\"   \r\n            response.data    = respDoc            \r\n            deferred.resolve(response)             \r\n            \r\n          })\r\n\r\n        }catch(err){        \r\n          response.status  = \"error\"\r\n          response.message = err               \r\n          deferred.reject(response) \r\n        }\r\n\r\n        return deferred.promise\r\n    },\r\n\r\n    /*Desc   : Get company list\r\n      Params : skip,limit\r\n      Returns: Promise\r\n               Resolve->company list\r\n               Reject->Error on find()\r\n    */\r\n    getList: (skip,limit) => {      \r\n       \r\n        let deferred = q.defer()\r\n        let response = {}\r\n\r\n        try{  \r\n\r\n          var collection=global.mongoCon.collection(\"company\")       \r\n\r\n          collection.find().skip(skip).limit(limit).toArray(function(err, docs) {\r\n            if(err) { \r\n              response.status  = \"error\"\r\n              response.message = \"Unable to get the company list.\"               \r\n              deferred.reject(response)\r\n            }\r\n            \r\n            response.status  = \"success\"\r\n            response.message = \"Successfully fetched the company list\"   \r\n            response.data    = docs            \r\n            deferred.resolve(response)             \r\n            \r\n          })\r\n\r\n        }catch(err){        \r\n          response.status  = \"error\"\r\n          response.message = err               \r\n          deferred.reject(response) \r\n        }\r\n\r\n        return deferred.promise\r\n    },\r\n\r\n    /*Desc   : Update company info\r\n      Params : companyId, {address,city,country,email,phone}\r\n      Returns: Promise\r\n               Resolve->new company\r\n               Reject->Error on findOneAndUpdate()\r\n    */\r\n    updateCompany: (companyId,updateCompanyObj) => {      \r\n       \r\n        let deferred = q.defer()\r\n        let response = {}\r\n\r\n        try{  \r\n\r\n          var collection=global.mongoCon.collection(\"company\")   \r\n\r\n          let updateObj = {}\r\n          updateObj.updatedAt = new Date().getTime()  \r\n          if(updateCompanyObj.country){\r\n            updateObj.address = updateCompanyObj.address\r\n          }\r\n          if(updateCompanyObj.city){\r\n            updateObj.city = updateCompanyObj.city\r\n          } \r\n          if(updateCompanyObj.country){\r\n            updateObj.country = updateCompanyObj.country\r\n          } \r\n          if(updateCompanyObj.email){\r\n            updateObj.email = updateCompanyObj.email\r\n          } \r\n          if(updateCompanyObj.phone){\r\n            updateObj.phone = updateCompanyObj.phone\r\n          }     \r\n\r\n          collection.findOneAndUpdate({_id: new mongodb.ObjectId(companyId)},{$set:updateObj},{returnOriginal: false},function(err, resp) {\r\n            if(err) { \r\n              response.status  = \"error\"\r\n              response.message = \"Unable to update the company with given company id and update object.\"               \r\n              deferred.reject(response)\r\n            }\r\n            \r\n            response.status  = \"success\"\r\n            response.message = \"Successfully update the company\"   \r\n            response.data    = resp.value            \r\n            deferred.resolve(response)             \r\n            \r\n          })\r\n\r\n        }catch(err){        \r\n          response.status  = \"error\"\r\n          response.message = err               \r\n          deferred.reject(response) \r\n        }\r\n\r\n        return deferred.promise\r\n    },\r\n\r\n    /*Desc   : Add beneficial\r\n      Params : companyId, {name,email}\r\n      Returns: Promise\r\n               Resolve->new company\r\n               Reject->Error on findOneAndUpdate()\r\n    */\r\n    addBeneficial: (companyId,addBeneficialObj) => {      \r\n       \r\n        let deferred = q.defer()\r\n        let response = {}\r\n\r\n        try{  \r\n\r\n          var collection=global.mongoCon.collection(\"company\")   \r\n\r\n          //Check if already beneficial owner exist with email         \r\n          let checkBenficialExistQuery = {\r\n            \"$elemMatch\" : {\r\n              email : addBeneficialObj.email\r\n            }\r\n          }          \r\n\r\n          collection.find({_id: new mongodb.ObjectId(companyId),beneficials : checkBenficialExistQuery}).limit(1).next(function(err, respDoc) {\r\n            if(err) { \r\n              response.status  = \"error\"\r\n              response.message = \"Unable to add beneficial. please retry\"               \r\n              deferred.reject(response)\r\n            }\r\n            if(respDoc){ \r\n              response.status  = \"error\"\r\n              response.message = \"Beneficial already exist with email:\"+  addBeneficialObj.email             \r\n              deferred.reject(response)              \r\n            }\r\n            if(!respDoc){ \r\n\r\n              var updateObj = {\r\n                updatedAt : new Date().getTime() \r\n              }\r\n\r\n              let pushObj   = {\r\n                beneficials : {\r\n                  name  : addBeneficialObj.name,\r\n                  email : addBeneficialObj.email\r\n                }\r\n              }\r\n\r\n              collection.findOneAndUpdate({_id: new mongodb.ObjectId(companyId)},{$set:updateObj,$push:pushObj},{returnOriginal: false},function(err, resp) {\r\n                if(err) { \r\n                  response.status  = \"error\"\r\n                  response.message = \"Unable to add the beneficial with given company id and beneficial object.\"               \r\n                  deferred.reject(response)\r\n                }\r\n                \r\n                response.status  = \"success\"\r\n                response.message = \"Successfully added the new beneficial\"   \r\n                response.data    = resp.value            \r\n                deferred.resolve(response)             \r\n                \r\n              })\r\n\r\n            }    \r\n          })          \r\n\r\n        }catch(err){        \r\n          response.status  = \"error\"\r\n          response.message = err               \r\n          deferred.reject(response) \r\n        }\r\n\r\n        return deferred.promise\r\n    }\r\n}\r\n\r\nexport default companyService\r\n"]}