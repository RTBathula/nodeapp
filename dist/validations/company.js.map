{"version":3,"sources":["../../app/validations/company.js"],"names":["util","createNew","req","res","next","newCompanyObj","body","response","status","Object","prototype","toString","call","message","json","name","hasWhiteSpace","length","address","city","country","email","validateEmail","phone","directors","uniqueDirectors","i","indexOf","push","beneficials","uniqueBeneficials","getDetails","companyId","params","id","updateCompany","updateCompanyObj","addBeneficial","addBeneficialObj"],"mappings":"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","file":"company.js","sourcesContent":["import * as util  from '../helpers/util'\r\n\r\nexport const createNew = (req, res, next) => { \t\r\n\tlet newCompanyObj = req.body || null\r\n    let response = {\r\n    \tstatus: \"error\"\r\n    }\r\n\r\n    //Validate\r\n    if(!newCompanyObj || Object.prototype.toString.call(newCompanyObj)==\"[object Null]\"){\r\n    \tresponse.message = \"Invalid company object\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    if(newCompanyObj && (!newCompanyObj.name || newCompanyObj.name==\"\" || (newCompanyObj.name && util.hasWhiteSpace(newCompanyObj.name)))){  \r\n        response.message = \"Company name is required\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    if(newCompanyObj.name && (newCompanyObj.name.length<2)){       \r\n        response.message = \"Company name should contain atleast of 2 letters\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    if(newCompanyObj && (!newCompanyObj.address || newCompanyObj.address==\"\" || (newCompanyObj.address && util.hasWhiteSpace(newCompanyObj.address)))){\r\n        response.message = \"Company address is required\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    if(newCompanyObj.address && (newCompanyObj.address.length<2)){\r\n        response.message = \"Company address should contain atleast of 2 letters\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    if(newCompanyObj && (!newCompanyObj.city || newCompanyObj.city==\"\" || (newCompanyObj.city && util.hasWhiteSpace(newCompanyObj.city)))){\r\n        response.message = \"Company city is required\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    if(newCompanyObj.city && (newCompanyObj.city.length<2)){\r\n        response.message = \"Company city should contain atleast of 2 letters\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    if(newCompanyObj && (!newCompanyObj.country || newCompanyObj.country==\"\" || (newCompanyObj.country && util.hasWhiteSpace(newCompanyObj.country)))){\r\n        response.message = \"Company country is required\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    if(newCompanyObj.country && (newCompanyObj.country.length<2)){\r\n        response.message = \"Company country should contain atleast of 2 letters\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    if(newCompanyObj && (newCompanyObj.email && !util.validateEmail(newCompanyObj.email))){     \r\n        response.message = \"Invalid company email\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    if(newCompanyObj && (newCompanyObj.phone && newCompanyObj.phone.length<9)){\r\n        response.message = \"Company phone should atleast of 9 digits\"\r\n        return res.status(400).json(response)\r\n    }   \r\n\r\n    if(newCompanyObj && (!newCompanyObj.directors || newCompanyObj.directors.length==0)){        \r\n        response.message = \"Atleast one company director is required\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    let uniqueDirectors = []\r\n    if(newCompanyObj.directors.length>0){\r\n        for(let i=0;i<newCompanyObj.directors.length;++i){\r\n        \tlet name  = newCompanyObj.directors[i].name\r\n        \tlet email = newCompanyObj.directors[i].email\r\n\r\n        \tif(uniqueDirectors.indexOf(email)>-1){\r\n        \t\tresponse.message = \"Duplicate director email:\"+email\r\n        \t\treturn res.status(400).json(response)\r\n        \t}\r\n\r\n        \tif(!name || name==\"\" || (name && util.hasWhiteSpace(name))){\t\t\r\n\t\t        response.message = \"Director name is invalid\"\r\n        \t\treturn res.status(400).json(response)\r\n\t\t    }\r\n\t\t    if(name && (name.length<2)){\t\t     \r\n\t\t        response.message = \"Director name should contain atleast of 2 letters\"\r\n        \t\treturn res.status(400).json(response)\r\n\t\t    }\r\n\r\n\t\t    if(!email || !util.validateEmail(email)){\t\t       \r\n\t\t        response.message = \"Invalid director email\"\r\n        \t\treturn res.status(400).json(response)\r\n\t\t    }\r\n\r\n\t\t    uniqueDirectors.push(email)\r\n        }\r\n    }\r\n\r\n    if(newCompanyObj && (!newCompanyObj.beneficials  || newCompanyObj.beneficials.length==0)){    \r\n        response.message = \"Atleast one company beneficial is required\"\r\n       \treturn res.status(400).json(response)\r\n    }\r\n\r\n    let uniqueBeneficials = []\r\n    if(newCompanyObj.beneficials.length>0){\r\n        for(let i=0;i<newCompanyObj.beneficials.length;++i){\r\n        \tlet name  = newCompanyObj.beneficials[i].name\r\n        \tlet email = newCompanyObj.beneficials[i].email\r\n\r\n        \tif(uniqueBeneficials.indexOf(email)>-1){\r\n        \t\tresponse.message = \"Duplicate beneficial email:\"+email\r\n        \t\treturn res.status(400).json(response)\r\n        \t}\r\n\r\n        \tif(!name || name==\"\" || (name && util.hasWhiteSpace(name))){\t\t       \r\n\t\t        response.message = \"Beneficial name is invalid\"\r\n       \t\t\treturn res.status(400).json(response)\r\n\t\t    }\r\n\t\t    if(name && (name.length<2)){\r\n\t\t    \tresponse.message = \"Beneficial name should contain atleast of 2 letters\"\r\n       \t\t\treturn res.status(400).json(response)\t\t   \r\n\t\t    }\r\n\r\n\t\t    if(!email || !util.validateEmail(email)){\t\t        \r\n\t\t        response.message = \"Invalid beneficial email\"\r\n       \t\t\treturn res.status(400).json(response)\t\r\n\t\t    }\r\n\r\n\t\t    uniqueBeneficials.push(email)\r\n        }\r\n    }\r\n\r\n    return next()\r\n}\r\n\r\nexport const getDetails = (req, res, next) => {  \r\n    let companyId = req.params.id || null\r\n    let response = {\r\n        status: \"error\"\r\n    }\r\n\r\n    if(!companyId || companyId==\"\"){\r\n        response.message = \"Company id is required\"\r\n        return res.status(400).json(response)\r\n    }   \r\n\r\n    return next()\r\n}\r\n\r\nexport const updateCompany = (req, res, next) => {  \r\n    let companyId        = req.params.id || null\r\n    let updateCompanyObj = req.body || null\r\n\r\n    let response = {\r\n        status: \"error\"\r\n    }\r\n\r\n    if(!companyId || companyId==\"\"){\r\n        response.message = \"Company id is required\"\r\n        return res.status(400).json(response)\r\n    }  \r\n\r\n    //Validate\r\n    if(!updateCompanyObj || Object.prototype.toString.call(updateCompanyObj)==\"[object Null]\"){\r\n        response.message = \"Invalid update company object\"\r\n        return res.status(400).json(response)\r\n    } \r\n\r\n    if(!updateCompanyObj.address && !updateCompanyObj.city && !updateCompanyObj.country && !updateCompanyObj.email && !updateCompanyObj.phone){\r\n        response.message = \"Invalid update company object\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    if(updateCompanyObj.address && (updateCompanyObj.address.length<2)){\r\n        response.message = \"Company address should contain atleast of 2 letters\"\r\n        return res.status(400).json(response)\r\n    }   \r\n\r\n    if(updateCompanyObj.city && (updateCompanyObj.city.length<2)){\r\n        response.message = \"Company city should contain atleast of 2 letters\"\r\n        return res.status(400).json(response)\r\n    }  \r\n\r\n    if(updateCompanyObj.country && (updateCompanyObj.country.length<2)){\r\n        response.message = \"Company country should contain atleast of 2 letters\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    if(updateCompanyObj.email && !util.validateEmail(updateCompanyObj.email)){     \r\n        response.message = \"Invalid company email\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    if(updateCompanyObj.phone && updateCompanyObj.phone.length<9){\r\n        response.message = \"Company phone should atleast of 9 digits\"\r\n        return res.status(400).json(response)\r\n    }    \r\n\r\n    return next()\r\n}\r\n\r\n\r\nexport const addBeneficial = (req, res, next) => {  \r\n    let companyId        = req.params.id || null\r\n    let addBeneficialObj = req.body || null\r\n\r\n    let response = {\r\n        status: \"error\"\r\n    }\r\n\r\n    if(!companyId || companyId==\"\"){\r\n        response.message = \"Company id is required\"\r\n        return res.status(400).json(response)\r\n    }  \r\n\r\n    //Validate\r\n    if(!addBeneficialObj || Object.prototype.toString.call(addBeneficialObj)==\"[object Null]\"){\r\n        response.message = \"Invalid add beneficial object\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    if(!addBeneficialObj.name || addBeneficialObj.name==\"\" || (addBeneficialObj.name && util.hasWhiteSpace(addBeneficialObj.name))){        \r\n        response.message = \"Beneficial name is invalid\"\r\n        return res.status(400).json(response)\r\n    }\r\n    if(addBeneficialObj.name.length<2){             \r\n        response.message = \"Beneficial name should contain atleast of 2 letters\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    if(!addBeneficialObj.email || !util.validateEmail(addBeneficialObj.email)){              \r\n        response.message = \"Invalid beneficial email\"\r\n        return res.status(400).json(response)\r\n    }    \r\n\r\n    return next()\r\n}"]}