{"version":3,"sources":["../../app/validations/company.js"],"names":["util","createNew","req","res","next","newCompanyObj","body","response","status","console","log","Object","prototype","toString","call","message","json","name","hasWhiteSpace","length","address","city","country","email","validateEmail","phone","directors","uniqueDirectors","i","indexOf","push","beneficials","uniqueBeneficials","getDetails","companyId","params","id","updateCompany","updateCompanyObj","addBeneficial","addBeneficialObj"],"mappings":"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","file":"company.js","sourcesContent":["import * as util  from '../helpers/util'\r\n\r\nexport const createNew = (req, res, next) => { \t\r\n\tlet newCompanyObj = req.body || null\r\n    let response = {\r\n    \tstatus: \"error\"\r\n    }\r\n    console.log(newCompanyObj)\r\n\r\n    //Validate\r\n    if(!newCompanyObj || Object.prototype.toString.call(newCompanyObj)==\"[object Null]\"){\r\n    \tresponse.message = \"Invalid company object\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    if(newCompanyObj && (!newCompanyObj.name || newCompanyObj.name==\"\" || (newCompanyObj.name && util.hasWhiteSpace(newCompanyObj.name)))){  \r\n        response.message = \"Company name is required\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    if(newCompanyObj.name && (newCompanyObj.name.length<2)){       \r\n        response.message = \"Company name should contain atleast of 2 letters\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    if(newCompanyObj && (!newCompanyObj.address || newCompanyObj.address==\"\" || (newCompanyObj.address && util.hasWhiteSpace(newCompanyObj.address)))){\r\n        response.message = \"Company address is required\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    if(newCompanyObj.address && (newCompanyObj.address.length<2)){\r\n        response.message = \"Company address should contain atleast of 2 letters\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    if(newCompanyObj && (!newCompanyObj.city || newCompanyObj.city==\"\" || (newCompanyObj.city && util.hasWhiteSpace(newCompanyObj.city)))){\r\n        response.message = \"Company city is required\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    if(newCompanyObj.city && (newCompanyObj.city.length<2)){\r\n        response.message = \"Company city should contain atleast of 2 letters\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    if(newCompanyObj && (!newCompanyObj.country || newCompanyObj.country==\"\" || (newCompanyObj.country && util.hasWhiteSpace(newCompanyObj.country)))){\r\n        response.message = \"Company country is required\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    if(newCompanyObj.country && (newCompanyObj.country.length<2)){\r\n        response.message = \"Company country should contain atleast of 2 letters\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    if(newCompanyObj && (newCompanyObj.email && !util.validateEmail(newCompanyObj.email))){     \r\n        response.message = \"Invalid company email\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    if(newCompanyObj && (newCompanyObj.phone && newCompanyObj.phone.length<9)){\r\n        response.message = \"Company phone should atleast of 9 digits\"\r\n        return res.status(400).json(response)\r\n    }   \r\n\r\n    if(newCompanyObj && (!newCompanyObj.directors || newCompanyObj.directors.length==0)){        \r\n        response.message = \"Atleast one company director is required\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    let uniqueDirectors = []\r\n    if(newCompanyObj.directors.length>0){\r\n        for(let i=0;i<newCompanyObj.directors.length;++i){\r\n        \tlet name  = newCompanyObj.directors[i].name\r\n        \tlet email = newCompanyObj.directors[i].email\r\n\r\n        \tif(uniqueDirectors.indexOf(email)>-1){\r\n        \t\tresponse.message = \"Duplicate director email:\"+email\r\n        \t\treturn res.status(400).json(response)\r\n        \t}\r\n\r\n        \tif(!name || name==\"\" || (name && util.hasWhiteSpace(name))){\t\t\r\n\t\t        response.message = \"Director name is invalid\"\r\n        \t\treturn res.status(400).json(response)\r\n\t\t    }\r\n\t\t    if(name && (name.length<2)){\t\t     \r\n\t\t        response.message = \"Director name should contain atleast of 2 letters\"\r\n        \t\treturn res.status(400).json(response)\r\n\t\t    }\r\n\r\n\t\t    if(!email || !util.validateEmail(email)){\t\t       \r\n\t\t        response.message = \"Invalid director email\"\r\n        \t\treturn res.status(400).json(response)\r\n\t\t    }\r\n\r\n\t\t    uniqueDirectors.push(email)\r\n        }\r\n    }\r\n\r\n    if(newCompanyObj && (!newCompanyObj.beneficials  || newCompanyObj.beneficials.length==0)){    \r\n        response.message = \"Atleast one company beneficial is required\"\r\n       \treturn res.status(400).json(response)\r\n    }\r\n\r\n    let uniqueBeneficials = []\r\n    if(newCompanyObj.beneficials.length>0){\r\n        for(let i=0;i<newCompanyObj.beneficials.length;++i){\r\n        \tlet name  = newCompanyObj.beneficials[i].name\r\n        \tlet email = newCompanyObj.beneficials[i].email\r\n\r\n        \tif(uniqueBeneficials.indexOf(email)>-1){\r\n        \t\tresponse.message = \"Duplicate beneficial email:\"+email\r\n        \t\treturn res.status(400).json(response)\r\n        \t}\r\n\r\n        \tif(!name || name==\"\" || (name && util.hasWhiteSpace(name))){\t\t       \r\n\t\t        response.message = \"Beneficial name is invalid\"\r\n       \t\t\treturn res.status(400).json(response)\r\n\t\t    }\r\n\t\t    if(name && (name.length<2)){\r\n\t\t    \tresponse.message = \"Beneficial name should contain atleast of 2 letters\"\r\n       \t\t\treturn res.status(400).json(response)\t\t   \r\n\t\t    }\r\n\r\n\t\t    if(!email || !util.validateEmail(email)){\t\t        \r\n\t\t        response.message = \"Invalid beneficial email\"\r\n       \t\t\treturn res.status(400).json(response)\t\r\n\t\t    }\r\n\r\n\t\t    uniqueBeneficials.push(email)\r\n        }\r\n    }\r\n\r\n    return next()\r\n}\r\n\r\nexport const getDetails = (req, res, next) => {  \r\n    let companyId = req.params.id || null\r\n    let response = {\r\n        status: \"error\"\r\n    }\r\n\r\n    if(!companyId || companyId==\"\"){\r\n        response.message = \"Company id is required\"\r\n        return res.status(400).json(response)\r\n    }   \r\n\r\n    return next()\r\n}\r\n\r\nexport const updateCompany = (req, res, next) => {  \r\n    let companyId        = req.params.id || null\r\n    let updateCompanyObj = req.body || null\r\n\r\n    let response = {\r\n        status: \"error\"\r\n    }\r\n\r\n    if(!companyId || companyId==\"\"){\r\n        response.message = \"Company id is required\"\r\n        return res.status(400).json(response)\r\n    }  \r\n\r\n    //Validate\r\n    if(!updateCompanyObj || Object.prototype.toString.call(updateCompanyObj)==\"[object Null]\"){\r\n        response.message = \"Invalid update company object\"\r\n        return res.status(400).json(response)\r\n    } \r\n\r\n    if(!updateCompanyObj.address && !updateCompanyObj.city && !updateCompanyObj.country && !updateCompanyObj.email && !updateCompanyObj.phone){\r\n        response.message = \"Invalid update company object\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    if(updateCompanyObj.address && (updateCompanyObj.address.length<2)){\r\n        response.message = \"Company address should contain atleast of 2 letters\"\r\n        return res.status(400).json(response)\r\n    }   \r\n\r\n    if(updateCompanyObj.city && (updateCompanyObj.city.length<2)){\r\n        response.message = \"Company city should contain atleast of 2 letters\"\r\n        return res.status(400).json(response)\r\n    }  \r\n\r\n    if(updateCompanyObj.country && (updateCompanyObj.country.length<2)){\r\n        response.message = \"Company country should contain atleast of 2 letters\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    if(updateCompanyObj.email && !util.validateEmail(updateCompanyObj.email)){     \r\n        response.message = \"Invalid company email\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    if(updateCompanyObj.phone && updateCompanyObj.phone.length<9){\r\n        response.message = \"Company phone should atleast of 9 digits\"\r\n        return res.status(400).json(response)\r\n    }    \r\n\r\n    return next()\r\n}\r\n\r\n\r\nexport const addBeneficial = (req, res, next) => {  \r\n    let companyId        = req.params.id || null\r\n    let addBeneficialObj = req.body || null\r\n\r\n    let response = {\r\n        status: \"error\"\r\n    }\r\n\r\n    if(!companyId || companyId==\"\"){\r\n        response.message = \"Company id is required\"\r\n        return res.status(400).json(response)\r\n    }  \r\n\r\n    //Validate\r\n    if(!addBeneficialObj || Object.prototype.toString.call(addBeneficialObj)==\"[object Null]\"){\r\n        response.message = \"Invalid add beneficial object\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    if(!addBeneficialObj.name || addBeneficialObj.name==\"\" || (addBeneficialObj.name && util.hasWhiteSpace(addBeneficialObj.name))){        \r\n        response.message = \"Beneficial name is invalid\"\r\n        return res.status(400).json(response)\r\n    }\r\n    if(addBeneficialObj.name.length<2){             \r\n        response.message = \"Beneficial name should contain atleast of 2 letters\"\r\n        return res.status(400).json(response)\r\n    }\r\n\r\n    if(!addBeneficialObj.email || !util.validateEmail(addBeneficialObj.email)){              \r\n        response.message = \"Invalid beneficial email\"\r\n        return res.status(400).json(response)\r\n    }    \r\n\r\n    return next()\r\n}"]}